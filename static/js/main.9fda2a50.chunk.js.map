{"version":3,"sources":["components/Todo.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","input","target","value","addTask","state","tasks","concat","toConsumableArray","removeTask","index","dataset","splice","_this2","_this$state","react_default","a","createElement","className","type","id","onChange","placeholder","map","task","key","data-index","onClick","length","Component","App","components_Todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAoEeA,cAjEd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMPQ,aAAe,SAACC,GACfR,EAAKS,SAAS,CACbC,MAAOF,EAAEG,OAAOC,SATCZ,EAYnBa,QAAU,WACTb,EAAKS,SAAS,SAACK,GAAD,MAAY,CACzBC,MAAK,GAAAC,OAAAf,OAAAgB,EAAA,EAAAhB,CAAOa,EAAMC,OAAb,CAAoBD,EAAMJ,QAC/BA,MAAO,OAfUV,EAkBnBkB,WAAa,SAACV,GACb,IAAIW,EAAQX,EAAEG,OAAOS,QAAQD,MAC7BnB,EAAKS,SAAS,SAACK,GACd,IAAIC,EAAKd,OAAAgB,EAAA,EAAAhB,CAAQa,EAAMC,OAEvB,OADAA,EAAMM,OAAOF,EAAO,GACb,CACNJ,YAtBFf,EAAKc,MAAQ,CACZC,MAAO,CAAE,QAAS,QAAS,QAAS,SACpCL,MAAO,IAJUV,wEA4BV,IAAAsB,EAAAnB,KAAAoB,EACepB,KAAKW,MAAtBC,EADEQ,EACFR,MAAOL,EADLa,EACKb,MACb,OACCc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,SACCE,KAAK,OACLC,GAAG,QACHjB,MAAOF,EACPoB,SAAU3B,KAAKI,aACfwB,YAAY,mCAEbP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,UACEX,EAAMiB,IAAI,SAACC,EAAMd,GACjB,OACCK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,MAAIQ,IAAKf,GACPc,EACDT,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeQ,aAAYhB,EAAOiB,QAASd,EAAKJ,YACjEM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAQpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,gCAAwBX,EAAMsB,SAE/Bb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMS,QAASjC,KAAKU,SACrCW,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+BA5DCW,aCYJC,cATd,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IAClBvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMJ,KACDe,MAAQ,GAFKd,wEAKlB,OAAOwB,EAAAC,EAAAC,cAACc,EAAD,aANSF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9fda2a50.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\nclass Todo extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttasks: [ 'task1', 'task2', 'task3', 'task4' ],\r\n\t\t\tinput: ''\r\n\t\t};\r\n\t}\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tinput: e.target.value\r\n\t\t});\r\n\t};\r\n\taddTask = () => {\r\n\t\tthis.setState((state) => ({\r\n\t\t\ttasks: [ ...state.tasks, state.input ],\r\n\t\t\tinput: ''\r\n\t\t}));\r\n\t};\r\n\tremoveTask = (e) => {\r\n\t\tlet index = e.target.dataset.index;\r\n\t\tthis.setState((state) => {\r\n\t\t\tlet tasks = [ ...state.tasks ];\r\n\t\t\ttasks.splice(index, 1);\r\n\t\t\treturn {\r\n\t\t\t\ttasks\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\trender() {\r\n\t\tlet { tasks, input } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tid=\"input\"\r\n\t\t\t\t\tvalue={input}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\tplaceholder=\"Type is your daily tasks......\"\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"list\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{tasks.map((task, index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div className=\"task\">\r\n\t\t\t\t\t\t\t\t\t<li key={index}>\r\n\t\t\t\t\t\t\t\t\t\t{task}\r\n\t\t\t\t\t\t\t\t\t\t<button className=\" btn del-btn\" data-index={index} onClick={this.removeTask}>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"fa fa-trash\" />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"no-of-tasks\">\r\n\t\t\t\t\t<span>Tasks remaining: {tasks.length}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"btn\" onClick={this.addTask}>\r\n\t\t\t\t\t<i className=\"fa fa-plus-square\" />\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Todo;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './components/Todo';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\trender() {\n\t\treturn <Todo />;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}